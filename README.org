#+title:  AC de Souza's personal NeoVim config for a Ruby on Rails web developer.
#+author: acdesouza
#+date:   2023-03-25

* NeoVim

  This is my attempt to document my usage of neovim and their Lua plugins.

** Usage

   My primary usage for NeoVim is as a code editor for Ruby on Rails applications.
   My way to use it is to open Vim in the the application's root directory. And, from there, I find the files I want to see and/or change.
   I usually use one window for a task. Splitting it to show each file I need to change for that particular task.


* Installation

  For managing the plugins I will use [[https://github.com/folke/lazy.nvim][lazy.nvim]].
  I don't have any particular reason to use it. It's was just _the first I heard about_ on this NeoVim World.

  #+begin_src bash
  $ mkdir ~/.config/
  $ cd ~/.config/
  $ git clone https://github.com/acdesouza/neovim_config.git ~/.config/nvim
  $ nvim --headless  "+Lazy! install" +qa
  #+end_src


* Customization

  - I will avoid any plugin using other script languages different from the defaults: lua and VimScript
  - I moved the leader key from ~\~ to ~Space~, a.k.a, ~<SPC>~. It's closer to other keys
  - Colorscheme [[https://github.com/catppuccin/nvim][Catppuccin Mocha]]
  - Show line number on cursor's line. And distance from current line in others
  - Sync clipboard with OS. So, you can yank/copy on Vim and paste everywhere
  - Always change tabs to spaces. And a tab is set to 2 spaces
  - Setup wildignore for git, MacOS, node, and Rails
  - Remove trailing whitespaces on the end of each line

** Plugins

  - [[https://www.vim.org/scripts/script.php?script_id=1075][netrw]] :: Default Vim File Manager customized to a [[http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/][card-flip experience, instead of a Project Drawer]].
    - ~<leader>e~: Toggles "flips the card" to show the current dir in netrw as a tree-viewer or current buffer
    - ~gn~: Sets the dir under cursor as treetop
    - ~<Enter>~: Opens file under cursor in the current window. "Flipping the card" back to the "file view"
    - ~d~: Create a new directory in directory selected by ~<Enter>~
    - ~%~: Create a new file in directory selected by ~<Enter>~
    - ~p~: Open a preview of the file under cursor
    - ~Ctrl-w z~: Close file preview
    - ~R~:  Moves/Renames the file/directory under cursor

  - [[https://github.com/stevearc/oil.nvim][oil.nvim]] :: It's an enhancement on netrw to allow manage directories like a vim buffer. Add files and directories by simply adding their names in a list.
    - ~<leader>o~: Toggles "flip the card" showing the directories using Oil.
    - ~_~: Opens current directory
    - ~-~: Move up directory
    - ~<C-s>~: Opens entry under cursor in a vertical split
    - ~<C-h>~: Opens entry under cursor in a horizontal split
    - ~<C-t>~: Opens entry under cursor in a new tab
    - ~<C-l>~: Refreshs buffers to reflect changes made outside
    - ~g?~: Show help

  - [[https://vim.fandom.com/wiki/Using_tab_pages][Vim tabs]] :: Just like browser tabs. I use it to concentrate all the files I need to change something. Then I create a new tab for _offtopics_
    - ~<C-t>~: Create a new tab
    - ~gT~ or ~<M-[>~: Move to the Vim tab on the ~left~ of the current one
    - ~gt~ or ~<M-]>~: Move to the Vim tab on the ~right~ of the current one
    - ~{i}gt~: Move to the Vim tab on position {i}

  - [[https://github.com/crispgm/nvim-tabline][nvim-tabline]] :: Helps adding a number on the tab to jump to it. And I like the icons.
    - It shows the tab index so I can <N>gt to Go to Tab with index <N>
    - It shows a pretty icon for the file extension

  - [[https://github.com/christoomey/vim-tmux-navigator][vim-tmux-navigator]] :: Allows to move from Vim to Tmux Pane using the same keybindings.
    - Do not move to Tmux Pane, or Window, when zoomed.
    - ~<C-h>~: Move to the Vim Window Split or Tmux Pane on the ~left~ of current one
    - ~<C-j>~: Move to the Vim Window Split or Tmux Pane ~below~ current one
    - ~<C-k>~: Move to the Vim Window Split or Tmux Pane ~above~ current one
    - ~<C-l>~: Move to the Vim Window Split or Tmux Pane on the ~right~ of current one

  - [[https://github.com/nvim-lualine/lualine.nvim][lualine.nvim]] :: Just a fancy and pretty status line with filetype icons from [[https://github.com/nvim-tree/nvim-web-devicons][nvim-web-devicons]].
    - Fancy status line for showing:
      - Vim current mode,
      - current git branch,
      - relative filename,
      - file encoding,
      - filetype fancy icon
      - Cursor position percentage of the file
      - Current cursor's line:column

  - [[https://github.com/nvim-telescope/telescope.nvim][telescope.nvim]] :: Fuzzy finder, Live Grep, and Bookmark directories as Projects. All with a fancy file preview. Filetype code highlighting enabled.
    - ~<Leader>ff~: [F]ind [F]iles
    - ~<Leader>fg~: [F]ind using [G]rep
    - ~<Leader>fb~: [F]ind [B]uffers
    - ~<Leader>gs~: [G]rep [S]tring
    - ~<Leader>p~ : [P]roject finder


  - Language Server Protocol :: [[https://langserver.org][LSP]] is the current trend on editor code analisys.
    The /tl;dr:/ is Microsoft VS Code gave birth to the idea of extracting out from the editor the code responsilble for language specific code-highlight, formatting, and diagnosis.
    My initial attempt was to setup it following the [[https://vonheikemen.github.io/devlog/tools/neovim-lsp-client-guide/][guide on Neovim's LSP client]] by @VonHeikemen_(author of [[https://github.com/VonHeikemen/lsp-zero.nvim][LSP Zero]] Neovim plugin. But, I wanted it with all the bells and whistles with automatic downloads and stylish code completion.
    - [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]] :: Pre-defined config for multiple Language Servers
    - [[https://github.com/nvim-lua/lsp-status.nvim][lsp-status]] :: Updated info about Language Server attached to the current buffer.
    - [[https://github.com/williamboman/mason.nvim][mason]] :: Automatically download Language Servers
      - Default LS installed:
        - 'lua_ls': Neovim config files in Lua,
        - 'emmet_language_server', and 'html': HTML, CSS, JavaScript
      - Installed manually:
        - Ruby: Solargraph :: Moved to config outside neovim due to error installing the solargraph-rails plugin.
          Before using it, make sure the ~solargraph~ and ~solargraph-rails~ gems are installed and available. If you are using RVM you can install it on the ~<Ruby-version>@global~ gemset. Making it available to any gemset you create for that Ruby version.

    - [[https://github.com/williamboman/mason-lspconfig.nvim][mason-lspconfig]] :: Bridge between nvim-lspconfig and mason
    - [[https://github.com/hrsh7th/nvim-cmp][nvim-cmp]] :: Completion engine plugin
      - ~<TAB>~: Selects the next option and autoselect it if there is only one option
      - ~<S-TAB>~: Selects the previous option
      - ~<CR>~: Confirm completion current selection
      - ~<C-e>~: Cancel completion
      - ~<C-u>~: Scroll docs up
      - ~<C-d>~: Scroll docs down
    - [[https://github.com/hrsh7th/cmp-nvim-lsp][cmp-nvim-lsp]] :: Config a Language Server as source for nvim-cmp
    - [[https://github.com/L3MON4D3/LuaSnip][LuaSnip]] :: Snippet engine supporting expansion of Language Server Snippets with nvim-cmp

    - [[https://github.com/VonHeikemen/lsp-zero.nvim/blob/v3.x/doc/md/api-reference.md#lsp-actions][Lsp-zero Keybindings]]
      - ~K~: Show docs under cursor
      - ~gd~: Requests LSP to [g]o to the ~[d]efinition~ under cursor
      - ~gD~: Requests LSP to [g]o to the ~[D]eclaration~ under cursor
      - ~gi~: Requests LSP to list all ~implementations~ under cursor in the quickfix window
      - ~go~: Requests LSP to [g]o to the ~type definiti[o]n~ under cursor
      - ~gr~: Requests LSP to list all ~[r]eferences~ under cursor in the quickfix window
      - ~<F2>~: Requests LSP to ~rename~ symbol under cursor
      - ~<F3>~: Requests LSP to ~format~ current buffer
      - ~<F4>~: Request LSP to execute ~code_action~ under cursor
      - ~gl~: Shows diagnostics in a floating window
      - ~[d~: Moves to the previous diagnostic
      - ~]d~: Moves to the next diagnostic

    - Formatting: Autoformatting enabled for following languages.
      - Ruby: Solargraph

  - [[https://tree-sitter.github.io/tree-sitter/][Tree-sitter]] :: It's kind of a trend, like LSP, to move things out from the editor. In this case, the language resilient(can handle partially finished) parser. The idea is an external tool building a Abstract Syntax Tree(AST) focused on the current file.

    In my case, combining it with the Catppuccin theme improves the syntaxe highlight.
    I [[https://github.com/tree-sitter/tree-sitter-ruby/issues/230#issuecomment-1312403487][need nvim-treesitter-endwise to fix wrong identation due to ~end~ being a valid Ruby identifier]].

  - [[https://github.com/vim-ruby/vim-ruby][Ruby]] on [[https://github.com/tpope/vim-rails][Rails]] :: Currently The Best Vim plugins to navigate Ruby on Rails projects. Thanks [[https://github.com/tpope][Tim Pope]]!
    - ~gd~: Go to Model under the cursor
    - ~gf~: Smart go to ~stuff~ under cursor.
      - Go to Model definition on a relationship(has_one, belongs_to, has_many, habtm) definition
      - Go to View template file with same name of the the Controller Action
      - Go to partial definition
    - ~:AS~: Horizontally split the current window and open the [A]lternate file above
    - ~:RS~: Horizontally split the current window and open the [R]elate file above
    - ~:Rails~: Run test case file in current buffer
    - ~:.Rails~: Run test under cursor
    - ~:Extract {file}~: Creates a new ~{file}~ with current selection, on View template, and replace it with ~render {file}~

  - [[https://github.com/nvim-orgmode/orgmode][nvim-orgmode]] :: It's [[http://orgmode.org][Orgmode]] clone written in Lua. I really like the Emacs org-mode for note taking. The ability to managing all offline in plain text, add a task "without context switching", tagging the tasks, and the Org Agenda are awesome.
    - [[https://github.com/nvim-orgmode/orgmode#links-are-not-concealed][Conceal links]]: Hidding the links on Org files
    - ~<Leader>oc~: Capture a new task
    - ~<Leader>or~: Refile(move to another file/subtree) current subtree
    - ~<Leader>oa~: Open Org Agenda
    - ~<TAB>~: Toggle folding on current headline
    - ~{~: Go to previous headline
    - ~}~: Go to next headline
    - ~<Leader><CR>~: Add headline, list item or checkbox (context aware)
    - ~g?~: Org-mode Help for more keybindings
